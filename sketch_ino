//Includes
#include "DHT.h"
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <WiFiClient.h>
#include <EEPROM.h>
#include <ESP8266WebServer.h>
//#include <DNSServer.h>

//Constant
#define LIGHTPIN A0
#define DHTPIN 4
#define DHTTYPE DHT11
#define LED_BUILTIN 16
// #define BATT_PIN A0


//Variables
String ssid = "";
String pasw = "";
String server = "";
String hwId = "";
String url = "";

//Settings
bool deepSleepOn = true;
long sleepTime = 4;  //in minutes
bool lightSensor = true;
const IPAddress apIP(192, 168, 1, 1); //page see
String apSSID = "Node Meter";

//Aliasses
#if defined(DHTPIN)
  DHT dht(DHTPIN, DHTTYPE);
#endif
ESP8266WebServer webServer(80);
//DNSServer dnsServer;

void setup() {
    Serial.begin(9600);
    EEPROM.begin(512);
    delay(10);
    
    pinMode(LIGHTPIN, INPUT);
    
    #if defined(BATT_PIN)
      pinMode(BATT_PIN, INPUT);
    #endif
    
    Serial.println("HW: " + String(hwId));
    sleepTime = sleepTime * 60000;
    
    #if defined(DHTPIN)
      dht.begin();
    #endif
}

void loop() {
    // WI-FI CONECTING
    Serial.println("WIFI SSID: "+String(ssid));
    Serial.println("SLEEP INTERVAL: "+String(sleepTime));
    
    bool restorSuccesful = restorSetting();
    
    WiFi.persistent(false);
    WiFi.mode(WIFI_STA);
    WiFi.forceSleepWake();
    WiFi.begin(ssid, pasw);
    
    if (!checkConnection() && restorSuccesful) {
        scanWifi();
        setupWebServer();
        webServer.begin();
        while (true){  
            Serial.println("CONECTION SETTING LOOP");
            //dnsServer.processNextRequest();
            webServer.handleClient();
        }
    }
    
    Serial.println("\nCONECTED TO WIFI");
    Serial.println("IP: " + WiFi.localIP().toString());
    
    HTTPClient http;
    http.begin(server);
    http.addHeader("Content-Type", "text/plain");  //Specify content-type header
    
    StaticJsonDocument<1024> sendContent;
    sendContent["token"] = hwId;
    #if defined(DHTPIN)
        sendContent["values"]["temp"]["value"] = String(getTemperature());
        sendContent["values"]["temp"]["unit"] = "C";
        sendContent["values"]["humi"]["value"] = String(getHumidity());
        sendContent["values"]["humi"]["unit"] = "%";
    #endif
    
    if (lightSensor){
        sendContent["values"]["light"]["value"] = String(getLight());
        sendContent["values"]["light"]["unit"] = "";
    }
    
    #if defined(BATT_PIN)
      sendContent["values"]["battery"]["value"] = String(getBattery());
      sendContent["values"]["battery"]["unit"] = "";
    #endif
    
    String requestJson = "";
    serializeJson(sendContent, requestJson);
    Serial.println("JSON: " + requestJson);
    
    int httpCode = http.POST(requestJson);
    String payload = http.getString();  //Get the response payload
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);
    
    String hostname = doc["device"]["hostname"];
    sleepTime = doc["device"]["sleepTime"];
    WiFi.hostname(hostname);
    
    Serial.println("HTTP CODE: " + String(httpCode) + ""); //Print HTTP return code
    Serial.println("HTTP BODY: " + String(payload) + "");  //Print request response payload
    http.end();  //Close connection
    Serial.println("DISCONECTED FROM WIFI");
    WiFi.disconnect();
    
    if (deepSleepOn) {
        Serial.println("GOING TO SLEEP FOR " + String(sleepTime));
        ESP.deepSleep((sleepTime * 60) * 1000000, RF_DEFAULT);  // 20e6 is 20 microseconds
        delay(1000);
    } else {
        delay(1000);
        delay(sleepTime);
    }
}

#if defined(DHTPIN)
  float getTemperature() {
      float t = dht.readTemperature();
      if (isnan(t)) {
          Serial.println( "Failed to read temperature from sensor!") ;
          return 999;
      }
      return t;
  }
  
  float getHumidity() {
      float h = dht.readHumidity();
      if (isnan(h)) {
          Serial.println("Failed to read humidity from sensor!");
          return 999;
      }
      return h;
  }
#endif

int getLight() {
    int l = digitalRead(LIGHTPIN);
    return l;
    if (l > 1000) {
        return 1;
    } else {
        return 0;
    }
    Serial.println("Failed to read light from sensor!");
    return 999;
}

#if defined(BATT_PIN)
  float getBattery() {
      float l = analogRead(BATT_PIN);
      float volts = 0;
      
      int sampleNumper = 100;
      for (int x = 0; x <= sampleNumper; x++) {
          volts = volts + (((l * 3.22265625) *2) /1000);
      }
      
      return volts/100;
  }
#endif

bool checkConnection() {
    int count = 0;
    Serial.print("Waiting for Wi-Fi connection");
    while ( count < 30 ) {
        if (WiFi.status() == WL_CONNECTED) {
            Serial.println();
            Serial.println("Connected!");
            return (true);
        }
        delay(500);
        Serial.print(".");
        count++;
    }
    Serial.println("Timed out.");
    return false;
}

bool restorSetting() {
    Serial.println("Reading EEPROM");
    ssid = "";
    pasw = "";
    hwId = "";
    url = "";
    if (EEPROM.read(0) != 0) {
        Serial.println("Reading EEPROM");
        for (int i = 0; i < 64; ++i) {
            ssid += char(EEPROM.read(i));
        }
        if (ssid == "") return false;
        Serial.println("SSID: " + String(ssid));
        for (int i = 64; i < 128; ++i) {
            pasw += char(EEPROM.read(i));
        }
        if (pasw == "") return false;
        Serial.println("PASS: " + String(pasw));
        for (int i = 128; i < 192; ++i) {
            hwId += char(EEPROM.read(i)); 
        }
        if (hwId == "") return false;
        Serial.println("TOKEN: " + String(hwId));
        for (int i = 192; i < 256; ++i) {
            url += char(EEPROM.read(i));
        }
        if (url == "") return false;
        Serial.println("URL: " + String(url));
        return true;
    } else {
        return false;
    }
}

void setupMode(){
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
}

String scanWifi(){
    String wifiList = "";
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);
    int n = WiFi.scanNetworks();
    Serial.println("scan done");
    if (n == 0) {
        Serial.println("no networks found");
    } else {
        Serial.print(n);
        Serial.println(" networks found");
        for (int i = 0; i < n; ++i) {
            //Serial.println("SSID: " + WiFi.SSID(i));
            wifiList = wifiList + String("<option value=\"");
            wifiList = wifiList + String(WiFi.SSID(i));
            wifiList = wifiList + String("\">");
            wifiList = wifiList + String(WiFi.SSID(i));
            wifiList = wifiList + String("</option>");
            delay(10);
        }
        WiFi.mode(WIFI_AP);
        WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
        WiFi.softAP(apSSID);
        //dnsServer.start(53, "*", apIP);
        Serial.println("Starting Access Point at " + apSSID);
    }
    return wifiList;
}

void setupWebServer(){
    webServer.on("/setap", []() {
        ssid = webServer.arg("ssid");
        pasw = webServer.arg("pasw");
        hwId = webServer.arg("token");
        url = webServer.arg("url");
        
        for (int i = 0; i < 256; ++i) {
            EEPROM.write(i, 0);
        }
        
        Serial.println("Writing EEPROM...");
        Serial.println("SSID:" + ssid);
        for (int i = 0; i < ssid.length(); ++i) {
            EEPROM.write(i,ssid[i]);
        }
        
        Serial.println("PASW:" + pasw);
        for (int i = 0; i < pasw.length(); ++i) {
            EEPROM.write(64 + i, pasw[i]);
        }
        
        Serial.println("TOKEN:" + hwId);
        for (int i = 0; i < hwId.length(); ++i) {
            EEPROM.write(128 + i, hwId[i]);
        }
        
        Serial.println("URL:" + url);
        for (int i = 0; i < url.length(); ++i) {
            EEPROM.write(192 + i, url[i]);
        }
        EEPROM.commit();
        
        Serial.println("Write EEPROM done!");
        String s = "<h1>Setup complete.</h1><p>device will be connected to \"";
        s += ssid;
        s += "\" after the restart.";
        webServer.send(200, "text/html", s);
        delay(1000);
        ESP.restart();
    });
    webServer.on("/restart", []() {
        ESP.restart();
    });
    webServer.onNotFound([]() {
        String s = "<h1>" + hwId + "</h1>";
        s += "<a href=\"/restart\"><p>Restartovat</p><a/>";
        s += "<a href=\"/setting\"><WIFI Network Setting</p><a/>";
        
        #if defined(DHTPIN)
            s += "<p>Temperature: "+String(getTemperature())+" C</p>";
            s += "<p>Humidity: "+String(getHumidity())+" %</p>";
        #endif 
        
        if (lightSensor){
            s += "<p>Light: "+String(getLight())+" </p>";
        }  
        
        #if defined(BATT_PIN)
          s += "<p>Battery: "+String(getBattery())+"V </p>";
        #endif  
        
        webServer.send(200, "text/html", makePage("AP mode", s));
    });
    webServer.on("/setting", []() {
        String s = "<h1>Wi-Fi Settings</h1><p>Please enter your password by selecting the SSID.</p>";
        s += "<form method=\"get\" action=\"setap\"><label>SSID: </label><select name=\"ssid\">";
        s += scanWifi();
        s += "</select><br>Password: <input name=\"pasw\" length=64 type=\"password\">";
        s += "<br>Password: <input name=\"pasw\" length=64 type=\"password\">";
        s += "<br>Token: <input name=\"token\" length=64 type=\"text\">";
        s += "<br>Api Url: <input name=\"url\" length=64 type=\"url\">";
        s += "<input type=\"submit\"></form>";
        webServer.send(200, "text/html", makePage("Wi-Fi Settings", s));
    });
    webServer.on("/setting", []() {
        String s = "<h1>Wi-Fi Settings</h1>";
        s += "<a href=\"/restart\"><p>Restartovat</p><a/>";
        s += "<a href=\"/setting\"><WIFI Network Setting</p><a/>";
        webServer.send(200, "text/html", makePage("Wi-Fi Settings", s));
    });
}

String makePage(String title, String contents) {
    String s = "<!DOCTYPE html><html><head>";
    s += "<meta name=\"viewport\" content=\"width=device-width,user-scalable=0\">";
    s += "<title>";
    s += title;
    s += "</title></head><body>";
    s += contents;
    s += "</body></html>";
    return s;
}

String urlDecode(String input) {
    String s = input;
    s.replace("%20", " ");
    s.replace("+", " ");
    s.replace("%21", "!");
    s.replace("%22", "\"");
    s.replace("%23", "#");
    s.replace("%24", "$");
    s.replace("%25", "%");
    s.replace("%26", "&");
    s.replace("%27", "\'");
    s.replace("%28", "(");
    s.replace("%29", ")");
    s.replace("%30", "*");
    s.replace("%31", "+");
    s.replace("%2C", ",");
    s.replace("%2E", ".");
    s.replace("%2F", "/");
    s.replace("%2C", ",");
    s.replace("%3A", ":");
    s.replace("%3A", ";");
    s.replace("%3C", "<");
    s.replace("%3D", "=");
    s.replace("%3E", ">");
    s.replace("%3F", "?");
    s.replace("%40", "@");
    s.replace("%5B", "[");
    s.replace("%5C", "\\");
    s.replace("%5D", "]");
    s.replace("%5E", "^");
    s.replace("%5F", "-");
    s.replace("%60", "`");
    return s;
}
